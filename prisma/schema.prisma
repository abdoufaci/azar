generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CLIENT
  EMPLOYEE
}

enum EmplyeeRole {
  CHEF
  CUTTER
  TAILOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  username              String                 @unique
  emailVerified         DateTime               @default(now())
  image                 Json?
  password              String
  address               String
  phone                 String                 @default("")
  wilaya                String                 @default("")
  role                  UserRole               @default(USER)
  employeeRole          EmplyeeRole            @default(TAILOR)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  workShopId String?
  workShop   WorkShop? @relation(fields: [workShopId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model WorkShop {
  id    String @id @default(cuid())
  name  String @unique
  image String

  employees User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
